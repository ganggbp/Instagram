type Like
  @model
  @auth(rules: [{allow: private, operations: [read]}, {allow: owner}]) {
  id: ID!
  userID: ID! @index(name: "byUser")
  postID: ID!
    @index(
      name: "byPost"
      queryField: "likesForPostByUser"
      sortKeyFields: ["userID"]
    )

  User: User @belongsTo(fields: ["userID"])
  Post: Post @belongsTo(fields: ["postID"])
}

type Comment
  @model
  @auth(rules: [{allow: private, operations: [read]}, {allow: owner}]) {
  id: ID!
  createdAt: AWSDateTime!
  comment: String!
  userID: ID! @index(name: "byUser")
  postID: ID!
    @index(
      name: "byPost"
      queryField: "commentsByPost"
      sortKeyFields: ["createdAt"]
    )

  User: User @belongsTo(fields: ["userID"])
  Post: Post @belongsTo(fields: ["postID"])
}

type Post
  @model
  @auth(rules: [{allow: private, operations: [read, update]}, {allow: owner}]) {
  id: ID!

  createdAt: AWSDateTime!
  # dummy field to make partition key to use sorted
  type: String!
    @index(
      name: "postsByDate"
      queryField: "postsByDate"
      sortKeyFields: ["createdAt"]
    )

  description: String
  image: String
  images: [String!]
  video: String
  nofComments: Int!
  nofLikes: Int!
  userID: ID! @index(name: "byUser")
  Likes: [Like] @hasMany(indexName: "byPost", fields: ["id"])
  Comments: [Comment] @hasMany(indexName: "byPost", fields: ["id"])
  User: User @belongsTo(fields: ["userID"])
}

type User
  @model
  @auth(rules: [{allow: private, operations: [read]}, {allow: owner}]) {
  id: ID!
  name: String!
  email: String @auth(rules: [{allow: owner}])
  username: String
    @index(name: "usersByUsername", queryField: "usersByUsername")
  bio: String
  website: AWSURL
  image: String
  nofPosts: Int!
  nofFollowings: Int!
  nofFollowers: Int!
  Posts: [Post] @hasMany(indexName: "byUser", fields: ["id"])
  Comments: [Comment] @hasMany(indexName: "byUser", fields: ["id"])
  Likes: [Like] @hasMany(indexName: "byUser", fields: ["id"])

  Followers: [UserFollow] @hasMany(indexName: "byFollowee", fields: ["id"])
  Followings: [UserFollow] @hasMany(indexName: "byFollower", fields: ["id"])

  fcmToken: String
  Notifications: [Notification] @hasMany(indexName: "byUser", fields: ["id"])
}

type UserFollow
  @model
  @auth(rules: [{allow: private, operations: [read]}, {allow: owner}]) {
  id: ID!

  followerID: ID!
    @index(
      name: "byFollower"
      sortKeyFields: ["followeeID"]
      queryField: "userFollowings"
    )
  followeeID: ID!
    @index(
      name: "byFollowee"
      sortKeyFields: ["followerID"]
      queryField: "userFollowers"
    )

  Follower: User @belongsTo(fields: ["followerID"])
  Followee: User @belongsTo(fields: ["followeeID"])
}

type UserFeedPost @model @auth(rules: [{allow: owner}]) {
  id: ID!

  userID: ID!
    @index(
      name: "byUser"
      sortKeyFields: ["postCreatedAt"]
      queryField: "userFeed"
    )
  postID: ID! @index(name: "byPost")

  postCreatedAt: AWSDateTime!
  postOwnerID: ID! @index(name: "byPostOwner")

  Post: Post @hasOne(fields: ["postID"])
}

enum NotificationTypes {
  NEW_FOLLOWER
  NEW_LIKE
  NEW_COMMENT
}

type Notification @model @auth(rules: [{allow: private}]) {
  id: ID!
  createdAt: AWSDateTime!

  readAt: AWSTimestamp!

  type: NotificationTypes!

  # The user we have to notify
  userId: ID!
    @index(
      name: "byUser"
      queryField: "userNotifications"
      sortKeyFields: ["createdAt"]
    )
  User: User @belongsTo(fields: ["userId"])

  # The user who triggered the notification
  actorId: ID!
  Actor: User @belongsTo(fields: ["actorId"])

  # The post this notification refers to (optional)
  Post: Post @hasOne
  Comment: Comment @hasOne
}

type Subscription {
  onCreateCommentByPostId(postID: ID!): Comment
    @aws_subscribe(mutations: ["createComment"])
}
